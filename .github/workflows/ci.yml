name: CI - Security Enhanced

on:
  push:
    branches: [master, main, 'feature/*', 'security/*']
  pull_request:
    branches: [master, main]
    types: [opened, synchronize, reopened]

# Cancel in-progress runs when a new run is queued
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-flight checks for environment and secrets
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      has-openai-key: ${{ steps.check-secrets.outputs.has-openai-key }}
      has-stripe-secret: ${{ steps.check-secrets.outputs.has-stripe-secret }}
    steps:
      - name: Check required secrets
        id: check-secrets
        run: |
          echo "has-openai-key=${{ secrets.OPENAI_API_KEY != '' }}" >> $GITHUB_OUTPUT
          echo "has-stripe-secret=${{ secrets.STRIPE_WEBHOOK_SECRET != '' }}" >> $GITHUB_OUTPUT
          
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "⚠️  Warning: OPENAI_API_KEY not set - some tests will be skipped"
          fi
          
          if [ -z "${{ secrets.STRIPE_WEBHOOK_SECRET }}" ]; then
            echo "⚠️  Warning: STRIPE_WEBHOOK_SECRET not set - webhook tests will be skipped"
          fi

  # Code quality checks - MUST PASS
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript check
        run: pnpm tsc --noEmit

      - name: Run ESLint
        run: pnpm lint
        continue-on-error: false  # MUST pass

      - name: Check formatting with Prettier
        run: pnpm prettier --check "**/*.{ts,tsx,js,jsx,json,md}"

      - name: Check for console.log in production code
        run: |
          # Exclude test files and check for console.log
          if grep -r "console\.log" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" \
             --exclude-dir="tests" --exclude-dir="test-results" --exclude-dir="node_modules" \
             --exclude="*test*" --exclude="*spec*" apps/; then
            echo "❌ Found console.log statements in production code!"
            exit 1
          else
            echo "✅ No console.log found in production code"
          fi

  # Security scanning - MUST PASS
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: preflight
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run npm audit
        run: |
          # Convert pnpm lockfile to package-lock.json for npm audit
          pnpm install --lockfile-only
          npm audit --production
        continue-on-error: true  # Log but don't fail for now

      - name: Check for exposed secrets
        run: |
          # Check for potential exposed secrets
          if grep -r -E "(api[_-]?key|secret|password|token)" --include="*.ts" --include="*.js" \
             --exclude-dir="node_modules" --exclude-dir="test*" . | \
             grep -v -E "(process\.env|import|require|interface|type|\.test\.|\.spec\.)"; then
            echo "⚠️  Warning: Potential exposed secrets found!"
          else
            echo "✅ No exposed secrets detected"
          fi

      - name: License compatibility check
        run: |
          # Basic license check - ensure no GPL licenses in production deps
          echo "Checking production dependency licenses..."
          pnpm licenses list --prod || true

  # Build and unit tests
  build-and-test:
    name: Build & Test (${{ matrix.os }}, Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: [code-quality, security-scan]
    strategy:
      fail-fast: false  # Continue testing other combinations if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
    
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      LICENCE_ENDPOINT: http://localhost:4100
      NODE_ENV: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.8
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Start license server
        run: |
          pnpm run license-server &
          echo "Waiting for license server to start..."
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -f http://localhost:4100/health 2>/dev/null; then
              echo "License server is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 1
          done
        shell: bash
      
      - name: Build all packages
        run: pnpm build
        
      - name: Run unit tests
        run: pnpm test
        if: always()  # Run even if build fails
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            test-results/
            coverage/

  # License and security integration tests
  license-security-tests:
    name: License & Security Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      LICENCE_ENDPOINT: http://localhost:4100
      LICENSE_SERVER_URL: http://localhost:4100
      TEST_SERVER_URL: http://localhost:4100
      STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
      NODE_ENV: test
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Start license server
        run: |
          # Start server with test configuration
          echo "Starting license server for testing..."
          ALLOW_DEV_ACTIVATION=true pnpm run license-server &
          
          # Wait for server
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -f http://localhost:4100/health 2>/dev/null; then
              echo "✅ License server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ License server failed to start!"
              exit 1
            fi
            echo "Waiting... ($i/30)"
            sleep 1
          done
      
      - name: Run license E2E tests
        run: |
          echo "Running license E2E tests..."
          node tests/license-e2e.test.js
        continue-on-error: false  # MUST pass
      
      - name: Run webhook tests
        run: |
          echo "Running webhook security tests..."
          if [ -n "${{ secrets.STRIPE_WEBHOOK_SECRET }}" ]; then
            node tests/test-stripe-webhooks.js
          else
            echo "⚠️  Skipping webhook tests - STRIPE_WEBHOOK_SECRET not set"
          fi
      
      - name: Run comprehensive security tests
        run: |
          echo "Running comprehensive security audit..."
          node tests/test-security-comprehensive.js
        continue-on-error: false  # MUST pass
        
      - name: Test production integration
        run: |
          echo "Testing production integration endpoints..."
          node tests/test-production-integration.js
        continue-on-error: true  # Log but don't fail
      
      - name: Upload security test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            test-results/
            security-test-report.json
            license-e2e-report.json

  # Playwright E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
        
      - name: Build application
        run: pnpm build
        
      - name: Run Playwright tests
        run: pnpm test:e2e
        continue-on-error: true  # Don't fail the whole pipeline
        
      - name: Upload Playwright results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: |
            playwright-report/
            test-results/

  # Package validation (test built app)
  package-validation:
    name: Package Validation
    runs-on: ${{ matrix.os }}
    needs: [license-security-tests, e2e-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.8
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build and package app
        run: |
          pnpm build
          pnpm package
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false  # Skip code signing in CI
          
      - name: Test packaged app
        run: node tests/test-packaged-app.js
        if: runner.os != 'macOS'  # Skip on macOS due to code signing issues
        continue-on-error: true
        
      - name: Upload packaged app
        uses: actions/upload-artifact@v4
        with:
          name: packaged-app-${{ matrix.os }}
          path: dist/*

  # Final status check - ALL MUST PASS
  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [
      preflight,
      code-quality,
      security-scan,
      build-and-test,
      license-security-tests,
      e2e-tests,
      package-validation
    ]
    if: always()
    steps:
      - name: Check all job statuses
        run: |
          echo "Checking CI pipeline status..."
          
          # Check if any required jobs failed
          if [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "❌ Code quality checks failed!"
            exit 1
          fi
          
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "❌ Security scanning failed!"
            exit 1
          fi
          
          if [ "${{ needs.build-and-test.result }}" != "success" ]; then
            echo "❌ Build and test failed!"
            exit 1
          fi
          
          if [ "${{ needs.license-security-tests.result }}" != "success" ]; then
            echo "❌ License and security tests failed!"
            exit 1
          fi
          
          echo "✅ All required checks passed!"
          echo ""
          echo "Optional check results:"
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "- Package Validation: ${{ needs.package-validation.result }}" 