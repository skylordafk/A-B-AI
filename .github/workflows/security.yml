name: Security Audit

on:
  # Run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  # Allow manual triggers
  workflow_dispatch:
  # Run on security-related PRs
  pull_request:
    paths:
      - '**/package.json'
      - '**/pnpm-lock.yaml'
      - '.github/workflows/security.yml'
      - 'scripts/licence-server.ts'
      - 'servers/server.js'
      - '**/*security*.js'
      - '**/*license*.js'

jobs:
  security-audit:
    name: Security Audit
    permissions:
      contents: read
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8.15.8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run dependency audit
        run: |
          echo "🔍 Running dependency security audit with pnpm..."
          pnpm audit --recursive --audit-level=moderate
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: |
          echo "🔍 Checking for known vulnerabilities via pnpm..."
          pnpm audit --recursive --json || true

      - name: License compliance check
        run: |
          echo "📜 Checking license compliance..."
          pnpm licenses list --prod > licenses-report.txt
          
          # Check for problematic licenses
          if grep -E "(GPL|AGPL|LGPL|SSPL)" licenses-report.txt; then
            echo "⚠️  Warning: Found potentially problematic licenses"
            cat licenses-report.txt
          fi

      - name: Secret scanning
        run: |
          echo "🔑 Scanning for exposed secrets..."
          
          # Check for potential secrets
          SECRET_PATTERNS=(
            "sk-[a-zA-Z0-9]{48}"  # OpenAI
            "AIza[0-9A-Za-z-_]{35}"  # Google
            "ghp_[0-9a-zA-Z]{36}"  # GitHub
            "ghs_[0-9a-zA-Z]{36}"  # GitHub
            "api[_-]?key.*[:=].*['\"][a-zA-Z0-9]{20,}['\"]"
            "secret.*[:=].*['\"][a-zA-Z0-9]{20,}['\"]"
            "password.*[:=].*['\"][^'\"]{8,}['\"]"
            "stripe.*[:=].*['\"]sk_[a-zA-Z0-9]{24,}['\"]"
          )
          
          FOUND_SECRETS=false
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -E "$pattern" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" \
               --exclude-dir="node_modules" --exclude-dir="dist" --exclude-dir="test*" . | \
               grep -v -E "(process\.env|example|mock|test|spec)"; then
              echo "❌ Found potential exposed secret matching pattern: $pattern"
              FOUND_SECRETS=true
            fi
          done
          
          if [ "$FOUND_SECRETS" = true ]; then
            exit 1
          else
            echo "✅ No exposed secrets found"
          fi

      - name: SAST - Static Application Security Testing
        run: |
          echo "🛡️ Running static security analysis..."
          
          # Check for common security issues
          echo "Checking for eval() usage..."
          if grep -r "eval(" --include="*.ts" --include="*.js" --exclude-dir="node_modules" .; then
            echo "⚠️  Warning: Found eval() usage - potential security risk"
          fi
          
          echo "Checking for SQL injection vulnerabilities..."
          if grep -r -E "(query|execute).*\+.*['\"]" --include="*.ts" --include="*.js" --exclude-dir="node_modules" .; then
            echo "⚠️  Warning: Potential SQL injection vulnerability"
          fi
          
          echo "Checking for command injection..."
          if grep -r -E "(exec|spawn|system).*\+" --include="*.ts" --include="*.js" --exclude-dir="node_modules" .; then
            echo "⚠️  Warning: Potential command injection vulnerability"
          fi

      - name: Security headers check
        run: |
          echo "🔒 Checking security headers configuration..."
          
          # Check for security headers in server code
          SERVER_FILES=(
            "scripts/licence-server.ts"
            "servers/server.js"
            "servers/server-secure.js"
          )
          
          for file in "${SERVER_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              
              # Check for required headers
              HEADERS=(
                "X-Content-Type-Options"
                "X-Frame-Options"
                "X-XSS-Protection"
                "Strict-Transport-Security"
                "Content-Security-Policy"
              )
              
              for header in "${HEADERS[@]}"; do
                if ! grep -q "$header" "$file"; then
                  echo "⚠️  Missing security header: $header in $file"
                fi
              done
            fi
          done

      - name: Run comprehensive security tests
        run: |
          echo "🧪 Running security test suite..."
          
          # Start license server for testing
          ALLOW_DEV_ACTIVATION=true pnpm run license-server &
          SERVER_PID=$!
          
          # Wait for server
          for i in {1..30}; do
            if curl -f http://localhost:4100/health 2>/dev/null; then
              echo "✅ License server is ready!"
              break
            fi
            sleep 1
          done
          
          # Run security tests
          node tests/test-security-comprehensive.js || true
          
          # Cleanup
          kill $SERVER_PID 2>/dev/null || true

      - name: Generate security report
        if: always()
        run: |
          echo "📊 Generating security report..."
          
          {
            echo "# Security Audit Report"
            echo "Date: $(date -u)"
            echo ""
            echo "## Summary"
            echo "- Repository: ${{ github.repository }}"
            echo "- Branch: ${{ github.ref }}"
            echo "- Commit: ${{ github.sha }}"
            echo ""
            echo "## Checks Performed"
            echo "- ✅ Dependency vulnerability scan"
            echo "- ✅ License compliance check" 
            echo "- ✅ Secret scanning"
            echo "- ✅ Static security analysis"
            echo "- ✅ Security headers verification"
            echo "- ✅ Comprehensive security tests"
          } > security-report.md

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-artifacts-${{ github.run_id }}
          path: |
            security-report.md
            security-test-report.json
            licenses-report.txt

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const fs = require('fs');
              const report = fs.readFileSync('security-report.md', 'utf8');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
            } catch (err) {
              core.warning(`Could not post security summary comment: ${err.message}`);
            }

  # CodeQL Analysis
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}" 